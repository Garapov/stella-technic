<?php

namespace App\Console\Commands;

use App\Models\ProductParam;
use App\Models\ProductParamItem;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class RemoveParamDuplicates extends Command
{
    protected $signature = 'catalog:remove-param-duplicates {--param-name=} {--delay=200}';
    protected $description = 'ะะฑัะตะดะธะฝัะตั ะดัะฑะปะธะบะฐัั ProductParam ะฟะพ name, ะฟะตัะตะฝะพัะธั ProductParamItem ะธ ัะฒัะทะธ ั ProductVariant ะธ Product.';

    public function handle()
    {
        $this->newLine();
        $this->info('๐ ะะฐัะฐะปะพ ะพะฑัะฐะฑะพัะบะธ ะฟะฐัะฐะผะตััะพะฒ...');

        $delay = (int)$this->option('delay');
        $paramName = $this->option('param-name');

        // ะะพะปััะฐะตะผ ะฟะฐัะฐะผะตััั (ะฒัะต ะธะปะธ ะพะดะธะฝ ะฟะพ ะธะผะตะฝะธ)
        $query = ProductParam::query();
        if ($paramName) {
            $query->where('name', $paramName);
            $this->info("ะคะธะปัััะฐัะธั ะฟะพ ะธะผะตะฝะธ ะฟะฐัะฐะผะตััะฐ: {$paramName}");
        }

        $params = $query->get();
        if ($params->isEmpty()) {
            $this->warn('โ ะะฐัะฐะผะตััั ะฝะต ะฝะฐะนะดะตะฝั.');
            return;
        }

        // ะััะฟะฟะธัะพะฒะบะฐ ะฟะพ name
        $groups = $params->groupBy('name')->filter(fn ($g) => $g->count() > 1);

        if ($groups->isEmpty()) {
            $this->info('โ ะัะฑะปะธะบะฐัะพะฒ ะฝะต ะฝะฐะนะดะตะฝะพ.');
            return;
        }

        foreach ($groups as $name => $duplicates) {
            $this->line("\nโก๏ธ ะะฑัะฐะฑะพัะบะฐ ะดัะฑะปะธะบะฐัะพะฒ ะฟะฐัะฐะผะตััะฐ: {$name}");

            $main = $duplicates->shift(); // ะพัะฝะพะฒะฝะพะน ะฟะฐัะฐะผะตัั
            $this->line("   ะัะฝะพะฒะฝะพะน ะฟะฐัะฐะผะตัั: ID {$main->id}");

            foreach ($duplicates as $duplicate) {
                DB::transaction(function () use ($main, $duplicate, $name) {
                    foreach ($duplicate->params as $item) {
                        // ะัะพะฒะตััะตะผ, ะตััั ะปะธ ั ะพัะฝะพะฒะฝะพะณะพ ัะฐะบะพะต ะถะต ะทะฝะฐัะตะฝะธะต
                        $existing = ProductParamItem::where('product_param_id', $main->id)
                            ->where('value', $item->value)
                            ->first();

                        if ($existing) {
                            // ะะตัะตะฝะพัะธะผ ัะฒัะทะธ ProductVariant
                            $variantIds = DB::table('product_variant_product_param_item')
                                ->where('product_param_item_id', $item->id)
                                ->pluck('product_variant_id');

                            foreach ($variantIds as $variantId) {
                                DB::table('product_variant_product_param_item')->updateOrInsert([
                                    'product_variant_id' => $variantId,
                                    'product_param_item_id' => $existing->id,
                                ], ['updated_at' => now()]);
                            }

                            // ะะตัะตะฝะพัะธะผ ัะฒัะทะธ Product
                            $productIds = DB::table('product_product_param_item')
                                ->where('product_param_item_id', $item->id)
                                ->pluck('product_id');

                            foreach ($productIds as $productId) {
                                DB::table('product_product_param_item')->updateOrInsert([
                                    'product_id' => $productId,
                                    'product_param_item_id' => $existing->id,
                                ], ['updated_at' => now()]);
                            }

                            // ะฃะดะฐะปัะตะผ ัะฒัะทะธ ะธ ัะฐะผ ะดัะฑะปั
                            DB::table('product_variant_product_param_item')->where('product_param_item_id', $item->id)->delete();
                            DB::table('product_product_param_item')->where('product_param_item_id', $item->id)->delete();

                            $item->delete();

                            Log::info("๐ ะฃะดะฐะปะตะฝะพ ะดัะฑะปะธััััะตะต ะทะฝะฐัะตะฝะธะต '{$item->value}' ะฟะฐัะฐะผะตััะฐ '{$name}'");
                        } else {
                            // ะัะพััะพ ะฟะตัะตะฝะพัะธะผ item ะบ ะพัะฝะพะฒะฝะพะผั ะฟะฐัะฐะผะตััั
                            $item->update(['product_param_id' => $main->id]);
                        }
                    }

                    // ะฃะดะฐะปัะตะผ ัะฐะผ ะดัะฑะปั ะฟะฐัะฐะผะตััะฐ
                    $duplicate->delete();
                    Log::info("โ ะฃะดะฐะปะตะฝ ะดัะฑะปะธััััะธะน ะฟะฐัะฐะผะตัั '{$name}' (ID {$duplicate->id})");
                });

                usleep($delay * 1000);
            }
        }

        $this->newLine(2);
        $this->info('๐ฏ ะะฑัะตะดะธะฝะตะฝะธะต ะดัะฑะปะธะบะฐัะพะฒ ะทะฐะฒะตััะตะฝะพ.');
    }
}
